<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>  
  <comment>DDL statements for role database</comment>
  <entry key="check.table">role_props</entry>
  <entry key="roles.create">
	create table roles(name varchar(64) not null,parent varchar(64),  primary key(name));
  insert into roles(name) values('ADMIN');
  insert into roles(name) values('GROUP_ADMIN');
  -- WE CREATE A VIEW THAT DYNAMICALLY ADDS ADMIN AND GROUP ROLES DEPENDING ON GEONODE is_supgroups_groupprofileeruser TABLE
  create view roles_view as
  select * from roles
    union
  select 'ADMIN', null
    union
  select 'GROUP_ADMIN', null
    union
  select 'ROLE_'||UPPER(slug), null from groups_groupprofile;
  </entry>
  <entry key="roleprops.create">
	create table role_props(rolename varchar(64) not null,propname varchar(64) not null, propvalue varchar(2048),primary key (rolename,propname))
  </entry>

  <entry key="userroles.create">
	create table user_roles(username varchar(128) not null, rolename varchar(64) not null,  primary key(username,rolename));
  -- WE CREATE A VIEW THAT DYNAMICALLY ADDS ADMIN ROLES DEPENDING ON DJANGO is_superuser PROPERTY
  create view user_roles_view as
  select * from user_roles
    union
  select username, 'ADMIN' from people_profile where is_active and is_superuser;

  </entry>
  <entry key="userroles.indexcreate">
	create index user_roles_idx on user_roles(rolename,username)
  </entry>
  <entry key="grouproles.create">
	create table group_roles(groupname varchar(128) not null, rolename varchar(64) not null,  primary key(groupname,rolename));
  -- WE CREATE A VIEW THAT DYNAMICALLY ADDS GROUP ROLES DEPENDING ON GEONODE is_supgroups_groupprofileeruser TABLE
  create view group_roles_view as
  select * from group_roles
    union
  select slug, 'ROLE_'||UPPER(slug) from groups_groupprofile;
  </entry>
  <entry key="grouproles.indexcreate">
	create index group_roles_idx on group_roles(rolename,groupname)
  </entry>


  
  <entry key="roles.drop">drop table roles</entry>
  <entry key="roleprops.drop">drop table role_props</entry>
  <entry key="userroles.drop">drop table user_roles</entry>
  <entry key="grouproles.drop">drop table group_roles</entry>
	  
</properties>
