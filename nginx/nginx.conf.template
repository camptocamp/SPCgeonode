# nginx-app.conf

events {

}

http{

    # Allow Nginx to resolve Docker host names (see https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/)
    resolver 127.0.0.11;

    # https - listens on specific name - this uses letsencrypt cert
    server {
        listen              443 ssl;
        server_name         $WAN_HOST; # TODO : configurize HOSTNAME

        ssl_certificate     /spcgeonode-certbot/live/$WAN_HOST/fullchain.pem; # TODO : fix with actual outputs # TODO : configurize HOSTNAME
        ssl_certificate_key /spcgeonode-certbot/live/$WAN_HOST/privkey.pem; # TODO : fix with actual outputs # TODO : configurize HOSTNAME

        include spcgeonode.conf;
    }

    # http - listens to specific IP - this is not encrypted (not ideal but admissible on LAN)
    # TODO : do not use unencrypted connection even on LAN, but is it possible to have browser not complaining about unknown authority ?
    server {
        listen              80;
        server_name         $LAN_HOST nginx; # we add nginx as this is the host for internal API requests # TODO : configurize LAN HOSTNAME

        include spcgeonode.conf;
    }
    # https - listens on all other names - for example for LAN - we use autoissued cert
    # server {
    #     listen              443 ssl default_server;
    #     # server_name         $LAN_HOST; # TODO : configurize LAN HOSTNAME
        
    #     ssl_certificate     /etc/letsencrypt/autoissued/$LAN_HOST/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/autoissued/$LAN_HOST/privkey.pem;

    #     include spcgeonode.conf;
    # }


    # http - listen on all servers - we redirect to https
    server {
        listen 80 default_server;
        server_name $WAN_HOST;
        
        # Let's encrypt challenge
        location /.well-known {
            # Using a variable is a trick to let Nginx start even if upstream host is not up yet
            # (see https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/)
            set $upstream letsencrypt:80;
            proxy_pass http://$upstream;
        }

        # Redirect to https
        location / {
            # return 301 https://$WAN_HOST$request_uri; # TODO : configurize HOSTNAME
            return 302 https://$WAN_HOST$request_uri; # TODO : configurize HOSTNAME # TODO : remove this, we should use 301 (but not practical for debug)
        }
    }

}