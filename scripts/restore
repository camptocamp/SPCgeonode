#!/bin/bash -ex

REMOTE=wb-gfdrr-geonode-prod-sftp
DATA_PATH=/home/amorvan/data/worldbank/geonode-prod

docker volume create \
    --name spcgeonode_uploaded \
    --opt type=none \
    --opt device=${DATA_PATH}/uploaded \
    --opt o=bind

docker volume create \
    --name spcgeonode_geonode_config \
    --opt type=none \
    --opt device=${DATA_PATH}/geonode_config \
    --opt o=bind

docker volume create \
    --name spcgeonode_geoserver_datadir \
    --opt type=none \
    --opt device=${DATA_PATH}/geoserver_datadir \
    --opt o=bind

sudo rm -rf ${DATA_PATH}/postgres
mkdir ${DATA_PATH}/postgres
docker volume create \
    --name spcgeonode_postgres \
    --opt type=none \
    --opt device=${DATA_PATH}/postgres \
    --opt o=bind

# Geonode and Geoserver databases

docker-compose down
docker-compose up -d postgres

sleep 1

until docker-compose exec --user postgres postgres psql -c '\l'; do
  echo >&2 "$(date +%H:%M:%S) Postgres is unavailable - sleeping"
  sleep 1
done

cat <<EOF | docker exec -i --user postgres spcgeonode_postgres_1 psql
DROP DATABASE IF EXISTS geonode;
DROP DATABASE IF EXISTS geoserver;

DROP ROLE IF EXISTS geonode;
DROP ROLE IF EXISTS geoserver;

CREATE USER geonode WITH PASSWORD 'geonode';
CREATE USER geoserver WITH PASSWORD 'geoserver';

CREATE DATABASE geonode OWNER geonode;
CREATE DATABASE geoserver OWNER geonode;
EOF

cat ${DATA_PATH}/geonode.backup | \
    docker exec -i --user postgres spcgeonode_postgres_1 pg_restore -d geonode
cat ${DATA_PATH}/geoserver.backup | \
    docker exec -i --user postgres spcgeonode_postgres_1 pg_restore -d geoserver

# docker-compose run --rm django python manage.py migrate
