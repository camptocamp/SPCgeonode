version: '2'

# TODO : replace olivierdalang repository by pacificcommunity
secrets:
  admin_username:
    external: true
  admin_password:
    external: true


services:

  django:
    # This is our custom django application. It includes Geonode.
    image: olivierdalang/spcgeonode:django-latest # TODO : versionize
    environment: # WARNING changes here must be repercuted to django, celery and celerycam
      - GEOSERVER_PUBLIC_LOCATION=http://${WAN_HOST}/geoserver/
      - ALLOWED_HOSTS=${WAN_HOST},${LAN_HOST},nginx # we need nginx to allow calls to Geonode OAuth API from Geoserver
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - DJANGO_SETTINGS_MODULE=spcgeonode.settings
      - DEBUG=False
      - REGISTRATION_OPEN=True
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - STATIC_ROOT=/spcgeonode-static/
      - MEDIA_ROOT=/spcgeonode-media/
      - STATIC_URL=/static/
      - MEDIA_URL=/media/
      - GEOSERVER_LOCATION=http://nginx/geoserver/
      - C_FORCE_ROOT=1 # TODO : understand that (is it a security concern ?)
      - TIME_ZONE=Pacific/Fiji
    volumes:
      - static:/spcgeonode-static
      - media:/spcgeonode-media
    depends_on:
      - postgres
    secrets:
      - admin_username
      - admin_password 
    entrypoint: ["/spcgeonode/docker-entrypoint.sh"]
    command: ["uwsgi", "--chdir=/spcgeonode", "--module=spcgeonode.wsgi", "--socket=:8000", "--processes=5"]
    
  celery:
    # This is the celery worker that executes celery tasks created by Django.
    image: olivierdalang/spcgeonode:django-latest # TODO : versionize
    environment: # WARNING changes here must be repercuted to django, celery and celerycam
      - GEOSERVER_PUBLIC_LOCATION=http://${WAN_HOST}/geoserver/
      - ALLOWED_HOSTS=${WAN_HOST},${LAN_HOST},nginx # we need nginx to allow calls to Geonode OAuth API from Geoserver
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - DJANGO_SETTINGS_MODULE=spcgeonode.settings
      - DEBUG=False
      - REGISTRATION_OPEN=True
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - STATIC_ROOT=/spcgeonode-static/
      - MEDIA_ROOT=/spcgeonode-media/
      - STATIC_URL=/static/
      - MEDIA_URL=/media/
      - GEOSERVER_LOCATION=http://nginx/geoserver/
      - C_FORCE_ROOT=1 # TODO : understand that (is it a security concern ?)
      - TIME_ZONE=Pacific/Fiji
    volumes:
      - static:/spcgeonode-static
      - media:/spcgeonode-media
    depends_on:
      - postgres
    secrets:
      - admin_username
      - admin_password 
    command: 'python manage.py celery worker --app=geonode.celery_app:app -B -E -l INFO'

  celerycam:
    # This is the celery camera that monitors celery tasks and populate the djcelery django admin interface
    image: olivierdalang/spcgeonode:django-latest # TODO : versionize
    environment: # WARNING changes here must be repercuted to django, celery and celerycam
      - GEOSERVER_PUBLIC_LOCATION=http://${WAN_HOST}/geoserver/
      - ALLOWED_HOSTS=${WAN_HOST},${LAN_HOST},nginx # we need nginx to allow calls to Geonode OAuth API from Geoserver
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - DJANGO_SETTINGS_MODULE=spcgeonode.settings
      - DEBUG=False
      - REGISTRATION_OPEN=True
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - STATIC_ROOT=/spcgeonode-static/
      - MEDIA_ROOT=/spcgeonode-media/
      - STATIC_URL=/static/
      - MEDIA_URL=/media/
      - GEOSERVER_LOCATION=http://nginx/geoserver/
      - C_FORCE_ROOT=1 # TODO : understand that (is it a security concern ?)
      - TIME_ZONE=Pacific/Fiji
    volumes:
      - static:/spcgeonode-static
      - media:/spcgeonode-media
    depends_on:
      - postgres
    secrets:
      - admin_username
      - admin_password 
    command: 'python manage.py celerycam'

  postgres:
    # Vanilla PostGIS database.
    image: mdillon/postgis:9.6-alpine
    volumes:
      - database:/var/lib/postgresql/data 
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - deploy-network

  # elasticsearch:
  #   image: elasticsearch:5.6

  rabbitmq:
    # Vanilla RabbitMQ service. This is needed by celery
    image: rabbitmq:3.7 
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - deploy-network
  
  nginx:
    # Nginx is serving django static and media files and proxies to django and geonode
    image: olivierdalang/spcgeonode:nginx-latest # TODO : versionize
    build: ./nginx/
    environment:
      - WAN_HOST=${WAN_HOST}
      - LAN_HOST=${LAN_HOST}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - django
      - geoserver
    volumes:
      - static:/spcgeonode-static
      - media:/spcgeonode-media 
      - certbot-challenge:/spcgeonode-certbot-challenge
      - certbot-keys:/spcgeonode-certbot-keys
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - deploy-network

  geoserver:
    # This is the geoserver backend required by geonode.
    image: olivierdalang/spcgeonode:geoserver-latest # TODO : versionize
    build: ./geoserver/
    environment:
     - GEOSERVER_HOME=/geoserver-2.12.1
     - GEOSERVER_DATA_DIR=/spcgeonode-geodatadir
    volumes:
      - geodatadir:/spcgeonode-geodatadir/
    depends_on:
      - postgres 
    secrets:
      - admin_username
      - admin_password 
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - deploy-network

  letsencrypt:
    image: olivierdalang/spcgeonode:letsencrypt-latest # TODO : versionize
    build: ./letsencrypt/
    environment:
      - WAN_HOST=${WAN_HOST}
      - LAN_HOST=${LAN_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
    # command: /bin/true
    volumes:
      - certbot-challenge:/spcgeonode-certbot-challenge/
      - certbot-keys:/etc/letsencrypt/
    # volumes:
    #   - letsencrypt_certs:/etc/letsencrypt
    #   - letsencrypt_www:/var/www/letsencrypt
    networks:
      - deploy-network

  # backuper:
  #   image: olivierdalang/spcgeonode:backuper-latest # TODO : versionize
  #   build: ./backuper/
  #   volumes:
  #     - database:/tobackup/spcgeonode-database
  #     - media:/tobackup/spcgeonode-media
  #     - geodatadir:/tobackup/spcgeonode-geodatadir 
  #   deploy:
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #   networks:
  #     - deploy-network

  # visualizer:
  #   image: dockersamples/visualizer:stable
  #   ports:
  #     - "8080:8080"
  #   # volumes:
  #   #   - "/var/run/docker.sock:/var/run/docker.sock"
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #   networks:
  #     - deploy-network

volumes:
  static:
  media:
  database:
  geodatadir:
  certbot-challenge:
  certbot-keys:

# For some reason docker-swarm doesn't work when networks arent explicitely set
networks:
  deploy-network: # TODO : properly understand this (without it, it doesn't work with docker stack deploy)
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
